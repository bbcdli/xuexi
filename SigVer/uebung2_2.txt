% Aufgabe 1

wp = 1;
ws = 1.8;

ap = -3;
as = -82;

y = 1/(10^(ap/10));
eps  = sqrt(y-1);

z = 1/(10^(as/10));
lam  = sqrt(z-1);

N = ceil(log(lam/eps)/log(ws/wp));

p = ones(1, 2*N);

for i = 1: 2*N
    p(i) = (wp/nthroot(eps,N))*exp(j*pi*(N+2*i-1)/(2*N));
end

r = roots(p);

% plot(real(r),imag(r),'o'),axis('equal'),grid

for i = 1 : length(r)
    if real(r(i)) < 0
        plot(real(r(i)),imag(r(i)),'o'),axis('equal'), grid on
        hold on
    end
end


% Aufgabe 2

%%%%%%%%%%%%%%%%%

% Aufgabe 1

wp = 1;
ws = 1.8;

ap = -3;
as = -82;

y = 1/(10^(ap/10));
eps  = sqrt(y-1);

z = 1/(10^(as/10));
lam  = sqrt(z-1);

N = ceil(log(lam/eps)/log(ws/wp));

p = ones(1, 2*N);

for i = 1: 2*N
    p(i) = (wp/nthroot(eps,N))*exp(j*pi*(N+2*i-1)/(2*N));
end

r = roots(p);

poles = double.empty;  % ini polstelle as an empty array, the value type is double

for i = 1 : length(r)
    if real(r(i)) < 0
        poles(end+1) = r(i);
    end
end

subplot(4,1,1),plot(real(r),imag(r),'o'),axis('equal'),grid
plot(real(poles),imag(poles),'o'),axis('equal'), grid on
title('Polstellen');


% Aufgabe 2

w = linspace(0,3,4001);
tau = zeros(1,4001);


for i = 1:length(w)
    tau(i) = gDelay(0, poles, w(i));
end

subplot(4,1,2),plot(w,tau);
title('Gruppenlaufzeit');

h = zeros(1,4001);
for i = 1:length(w)
    h(i) = 1 / (1 + eps^2 * (w(i)/wp)^(2*N));
end


mag = abs(h);
phase = unwrap(angle(h));


% subplot(4,1,3),plot(w,mag);
% title('Betragsfrequenzgang');


% subplot(4,1,3), plot(w,20*log(h)), grid
% xlabel('Frequenz'); ylabel('dB')
% title('Betragsfrequenzgang');


[z,p,k] = buttap(N);

a = poly(p);
h = freqs(k,a,4001);
mag = abs(h);

phase = unwrap(angle(h));

subplot(4,1,3), plot(w,20*log(mag)), grid
xlabel('Frequenz'); ylabel('dB')
title('Betragsfrequenzgang');

subplot(4,1,4), plot(w,phase), grid
title('Phasenfrequenzgang');
xlabel('Frequenz'); ylabel('rad');


############################ in separate Datei gDelay.m !! 
####################

function [tau] = gDelay(zeroes, poles, w)

M = length(zeroes);
N = length(poles);

tau = 0;

for m = 1:M
    tau = tau + (real(zeroes(m))/(real(zeroes(m))^2+(w-imag(zeroes(m)))^2));
end

for n = 1:N
    tau = tau - (real(poles(n))/(real(poles(n))^2+(w-imag(poles(n)))^2));
end

end
