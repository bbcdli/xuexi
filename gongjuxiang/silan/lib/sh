#shape.py
#!/usr/bin/python
# -*- coding: utf-8 -*-
from copy import deepcopy
import numpy as np
from PyQt4.QtGui import *
from PyQt4.QtCore import *
from lib import distance
DEFAULT_LINE_COLOR = QColor(0, 200, 0, 128)
DEFAULT_H_LINE_COLOR= QColor(0, 0, 255, 255)
DEFAULT_SELECT_LINE_COLOR = QColor(200, 0, 0,128)
DEFAULT_LINE_INACTIVE_COLOR = QColor(80, 80, 80, 128)
DEFAULT_VERTEX_FILL_COLOR = DEFAULT_LINE_COLOR
DEFAULT_HVERTEX_FILL_COLOR = DEFAULT_H_LINE_COLOR
DEFAULT_VERTEX_FILL_COLOR_INACITVE = DEFAULT_LINE_INACTIVE_COLOR

DEFAULT_FILL_COLOR = QColor(180, 180, 180, 50)
DEFAULT_SELECT_FILL_COLOR = DEFAULT_FILL_COLOR
# DEFAULT_FILL_COLOR = QColor(155, 155, 155, 128)
# DEFAULT_SELECT_FILL_COLOR = QColor(0, 128, 255, 155)
class Shape(object):
    DIFFICULT_LEVELS = {0: 'normal', 1: 'difficult', 2: 'very difficult'}
    P_SQUARE, P_ROUND = range(2)
    MOVE_VERTEX, NEAR_VERTEX = range(2)
    ## The following class variables influence the drawing
    ## of _all_ shape objects.
    line_color = DEFAULT_LINE_COLOR
    line_color_inactive = DEFAULT_LINE_INACTIVE_COLOR
    fill_color = DEFAULT_FILL_COLOR
    select_line_color = DEFAULT_SELECT_LINE_COLOR
    select_fill_color = DEFAULT_SELECT_FILL_COLOR
    vertex_fill_color_inactive = DEFAULT_VERTEX_FILL_COLOR_INACITVE
    vertex_fill_color = DEFAULT_VERTEX_FILL_COLOR
    hvertex_fill_color = DEFAULT_HVERTEX_FILL_COLOR
    point_type = P_ROUND
    point_size = 8
    scale = 1.0
    def __init__(self, setDirty, label=None, line_color=None,
                 active_mode=True):
        self.setDirty = setDirty
        self._label = label
        self.points = []
        self.fill = False
        self.hover = False
        self._selected = False
        self.active_mode = active_mode
        self._highlightIndex = None
        self._highlightMode = self.NEAR_VERTEX
        self._highlightSettings = {
            self.NEAR_VERTEX: (4, self.P_ROUND),
            self.MOVE_VERTEX: (1.5, self.P_ROUND),
            }
        self._closed = False
        self._ignore = False
        self._difficult = 0
        self.hide_label = False
        if line_color is not None:
            # Override the class line_color attribute
            # with an object attribute. Currently this
            # is used for drawing the pending line a different color.
            self.line_color = line_color
        self.hover_line_color = DEFAULT_H_LINE_COLOR
    @property
    def difficult(self):
        return self._difficult
    @difficult.setter
    def difficult(self, dval):
        self._difficult = dval
        self.setDirty()
    @property
    def ignore(self):
        return self._ignore
    @ignore.setter
    def ignore(self, ival):
        self._ignore = ival
        self.setDirty()
    @property
    def label(self):
        return self._label
    @label.setter
    def label(self, value):
        self._label = value
        self.setDirty()
    def get_point_type(self, i):
        return self.point_type
    @property
    def selected(self):
        return self._selected
    @selected.setter
    def selected(self, selected):
        self._selected = selected
    def close(self):
        assert len(self.points) > 2
        self._closed = True
    def reachMaxPoints(self):
        raise NotImplementedError('Function has not been implemented yet')
    def addPoint(self, point):
        if self.points and point == self.points[0]:
            self.close()
        else:
            self.points.append(point)
        self.setDirty()
    def popPoint(self):
        if self.points:
            self.setDirty()
            return self.points.pop()
        return None
    def isClosed(self):
        return self._closed
    def setOpen(self):
        self._closed = False
    def paint(self, painter):
        if self.points:
            color = self.select_line_color if self.selected else self.line_color
            color = self.hover_line_color if self.hover and not self.selected else color
            pen = QPen(color)
            # Try using integer sizes for smoother drawing(?)
            pen.setWidth(max(1, int(round(2.0 / self.scale))))
            painter.setPen(pen)
            line_path = QPainterPath()
            line_path.moveTo(self.points[0])
            for i, p in enumerate(self.points):
                line_path.lineTo(p)
            if self.isClosed():
                line_path.lineTo(self.points[0])
            painter.drawPath(line_path)
            if self.ignore:
                painter.drawPath(line_path)
                line_path = QPainterPath()
                line_path.moveTo(self.points[0])
                line_path.lineTo(self.points[2])
                painter.drawPath(line_path)
                line_path.moveTo(self.points[1])
                line_path.lineTo(self.points[3])
                painter.drawPath(line_path)
            for i, p in enumerate(self.points):
                line_path.lineTo(p)
                self.drawVertex(i, painter)
    def draw_text(self, color, painter, pos_label, pos_diff):
        pos = deepcopy(pos_label)
        color = QColor(127, 127, 127, 127)
        brush = QBrush(color)
        margin = 3
        offset = 20
        # scale dependent offset
        offset *= 1./self.scale
        offset = max(7, offset)
        offset = min(50, offset)
        pos.setY(pos.y() + offset + margin)
        pos.setX(pos.x() + margin)
        fontsize = 10
        # scale dependent font size
        fontsize *= 1./self.scale
        fontsize = max(2, fontsize)
        fontsize = min(20, fontsize)
        font = QFont('Arial', fontsize)
        fm = QFontMetrics(font)
        lab_str = QString(self.DIFFICULT_LEVELS[self.difficult])
        lab_width = fm.width(lab_str)
        lab_height = fm.height()
        # font.setPointSizeF(5)
        painter.fillRect(QRectF(pos.x() - margin,
                         pos.y() - margin - fm.ascent(),
                         lab_width + 2 * margin,
                         lab_height + 2 * margin), brush)
        # bbox = fm.boundingRect(lab_str)
        # bbox.moveTo(pos.x(), pos.y())
        # painter.fillRect(bbox, brush)
        penHText = QPen(QColor("#ffffff"))
        painter.setPen(penHText)
        painter.setFont(font)
        # Note: The y-position is used as the baseline of the font.
        painter.drawText(pos, lab_str)
        # draw difficult
        pos = deepcopy(pos_diff)
        offset = 8
        offset *= 1./self.scale
        offset = max(3, offset)
        offset = min(50, offset)
        pos.setY(pos.y() - offset - margin)
        pos.setX(pos.x() + margin)
        lab_str = QString(self.label)
        lab_width = fm.width(lab_str)
        painter.fillRect(QRectF(pos.x() - margin,
                         pos.y() - margin - fm.ascent(),
                         lab_width + 2 * margin,
                         lab_height + 2 * margin), brush)
        # Note: The y-position is used as the baseline of the font.
        painter.drawText(pos, lab_str)

    def drawVertex(self, i, painter):
        color = self.select_line_color if self.selected or self.hover else self.line_color
        pen = QPen(color)
        pen.setWidth(max(1, int(round(2.0 / self.scale))))
        painter.setPen(pen)
        path = QPainterPath()
        d = self.point_size / self.scale
        shape = self.get_point_type(i)
        point = self.points[i]
        if i == self._highlightIndex:
            size, _shape = self._highlightSettings[self._highlightMode]
            d *= size
        if self._highlightIndex == i:
            self.vertex_fill_color = self.hvertex_fill_color
        else:
            self.vertex_fill_color = self.select_line_color if self.selected or self.hover else Shape.vertex_fill_color
        if not self.active_mode:
            self.vertex_fill_color = Shape.vertex_fill_color_inactive
        if shape == self.P_SQUARE:
            path.addRect(point.x() - d/2, point.y() - d/2, d, d)
        elif shape == self.P_ROUND:
            path.addEllipse(point, d/2.0, d/2.0)
        else:
            assert False, "unsupported vertex shape"
        painter.drawPath(path)
        painter.fillPath(path, self.vertex_fill_color)
    def nearestVertex(self, point, epsilon):
        if not self.active_mode:
            return
        for i, p in enumerate(self.points):
            if distance(p - point) <= epsilon:
                return i
        return None
    def containsPoint(self, point):
        return self.makePath().contains(point)
    def makePath(self):
        path = QPainterPath(self.points[0])
        for p in self.points[1:]:
            path.lineTo(p)
        return path
    def boundingRect(self):
        return self.makePath().boundingRect()
    def moveBy(self, offset):
        self.setDirty()
        self.points = [p + offset for p in self.points]
    def moveVertexBy(self, i, offset):
        self.setDirty()
        self.points[i] = self.points[i] + offset
    def highlightVertex(self, i, action):
        self._highlightIndex = i
        self._highlightMode = action
    def highlightClear(self):
        self._highlightIndex = None
    def copy(self):
        from copy import deepcopy
        # shape = Shape("Copy of %s" % self.label )
        shape = self.__class__( self.label )
        shape.points = [deepcopy(p) for p in self.points]
        shape.fill = self.fill
        shape.selected = self.selected
        shape.difficult = self.difficult
        shape.ignore = self.ignore
        shape._closed = self._closed
        if self.line_color != Shape.line_color:
            shape.line_color = self.line_color
        if self.fill_color != Shape.fill_color:
            shape.fill_color = self.fill_color
        return shape
    def __len__(self):
        return len(self.points)
    def __getitem__(self, key):
        return self.points[key]
    def __setitem__(self, key, value):
        self.points[key] = value
    def __delitem__(self, key):
        del self.points[key]

class Box(Shape):
    def paint(self, painter):
        super(Box, self).paint(painter)
        if self.active_mode and not self.hide_label:
                color = self.select_line_color if self.selected else self.line_color
                color = self.hover_line_color if self.hover and not self.selected else color
                if not self.ignore:
                    self.draw_text(color, painter, self.points[-1], self.points[0])
    def reachMaxPoints(self):
        if len(self.points) >= 4:
            return True
        return False

class Poly(Shape):
    def paint(self, painter):
        super(Poly, self).paint(painter)
        if self.active_mode and not self.hide_label:
                color = self.select_line_color if self.selected else self.line_color
                color = self.hover_line_color if self.hover and not self.selected else color
                ind = (len(self.points)-1) / 2 if len(self.points) > 1 else 0
                pos = self.points[ind]
                self.draw_text(color, painter, pos, pos)

    def reachMaxPoints(self):
        return False
    def get_point_type(self, i):
        return self.point_type if i < len(self.points)-1 else self.P_SQUARE
    def close(self):
        print 'Poly shall not be closed. Do nothing'
    def point_line_dist(self, x0, y0, lx1, ly1, lx2, ly2):
        num = np.abs((ly2 - ly1)*x0 -
                     (lx2 - lx1)*y0 +
                     lx2*ly1 - ly2*lx1)
        denom = np.sqrt((ly2 - ly1)**2 +
                        (lx2 - lx1)**2)
        return  num/denom
    def point_intersect(self, pt, eps=3):
        pts = self.points
        x, y = pt.x(), pt.y()
        for pidx in range(len(pts)-1):
            p1, p2 = pts[pidx], pts[pidx+1]
            p1x, p1y = p1.x(), p1.y()
            p2x, p2y = p2.x(), p2.y()
            # don't test if point does not lie in the rect area spanned by line start and ending
            left = min(p1x, p2x)
            right = max(p1x, p2x)
            top = min(p1y, p2y)
            bottom = max(p1y, p2y)
            if x < left or x > right:
                continue
            if y < top or y > bottom:
                continue
            dist = self.point_line_dist(x, y, p1x, p1y, p2x, p2y)
            if dist <= eps:
                return True
        return False

    def containsPoint(self, point, eps=3):
        return self.point_intersect(point, eps=eps)


